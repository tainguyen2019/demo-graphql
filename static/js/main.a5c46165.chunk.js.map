{"version":3,"sources":["relay/mutations/__generated__/UpdatePostMutation.graphql.ts","relay/mutations/__generated__/CreatePostMutation.graphql.ts","relay/queries/__generated__/PostQuery.graphql.ts","relay/queries/__generated__/TodoQuery.graphql.ts","relay/mutations/__generated__/ChangeTodoStatusMutation.graphql.ts","relay/mutations/__generated__/DeleteTodoMutation.graphql.ts","relay/mutations/__generated__/CreateTodoMutation.graphql.ts","relay/queries/__generated__/AlbumQuery.graphql.ts","relay/queries/__generated__/DashboardQuery.graphql.ts","components/common/link/styles.ts","components/common/link/index.tsx","components/app/navigation/styles.ts","components/app/navigation/index.tsx","relay/fetchGraphQL.ts","relay/environment.ts","relay/mutations/UpdatePostMutation.ts","relay/mutations/CreatePostMutation.ts","relay/queries/Post.ts","containers/post/components/card-item/index.tsx","containers/post/components/card-list/index.tsx","components/common/my-input/index.tsx","components/common/my-dialog/index.tsx","containers/post/components/create-form/index.tsx","containers/post/index.tsx","relay/queries/Todo.ts","relay/mutations/ChangeTodoStatusMutation.ts","relay/mutations/DeleteTodoMutation.ts","relay/mutations/CreateTodoMutation.ts","containers/todo/components/todo-item/index.tsx","containers/todo/components/todo-list/index.tsx","containers/todo/components/todo-form/index.tsx","containers/todo/index.tsx","relay/queries/Album.ts","containers/album/index.tsx","relay/queries/Dashboard.ts","containers/dashboard/components/latest-item/index.tsx","containers/dashboard/components/latest-list/index.tsx","containers/dashboard/components/dashboard-overview/index.tsx","containers/dashboard/index.tsx","containers/dashboard/utils.ts","theme/index.ts","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["node","v0","v1","hash","v2","v3","v4","v5","v6","v7","v8","v9","styles","createStyles","link","textTransform","fontWeight","textDecoration","color","borderBottom","marginBottom","linkActive","useStyles","makeStyles","classNamePrefix","Link","name","path","classes","to","className","activeClassName","exact","breakpoints","appName","up","flex","down","display","appLinks","justifyContent","Navigation","AppBar","position","Toolbar","Typography","variant","component","map","process","REACT_APP_API_URL","headers","Accept","Environment","network","Network","create","operation","variables","body","JSON","stringify","query","text","fetch","method","then","res","json","store","Store","RecordSource","mutation","commit","environment","post","commitMutation","id","input","title","CardItem","item","handleEdit","hideActions","Grid","Card","xs","md","style","flexDirection","height","margin","CardContent","flexGrow","textOverflow","overflow","whiteSpace","CardActions","Button","onClick","CardList","data","props","container","alignItems","MyInput","rules","defaultValue","control","shouldUnregister","InputLabelProps","fieldProps","useController","error","fieldState","field","ref","inputProps","errorMessage","message","Box","TextField","shrink","inputRef","mt","MyDialog","onClose","children","dialogProps","Dialog","paddingX","DialogTitle","IconButton","size","Close","initialValues","PostForm","open","onSubmit","useForm","defaultValues","handleSubmit","fullWidth","DialogContent","spacing","autoFocus","type","label","required","multiline","rows","DialogActions","PostComponent","useState","page","setPage","setOpen","handleChangePage","_event","value","postId","UpdatePostMutation","relayEnvironment","marginY","padding","options","paginate","limit","render","CircularProgress","textAlign","totalPosts","posts","meta","totalCount","Pagination","count","Math","ceil","onChange","Tooltip","Fab","sx","bottom","right","Add","CreatePostMutation","completed","todo","TodoItem","handleDelete","user","Chip","icon","Done","Pending","marginTop","borderColor","TodoList","TodoForm","TodoComponent","todoId","ChangeTodoStatusMutation","DeleteTodoMutation","totalTodos","todos","CreateTodoMutation","AlbumComponent","albums","totalAlbums","album","overflowY","Paper","ImageList","ImageListItem","cols","ListSubheader","photos","photo","src","url","alt","ImageListItemBar","LatestItem","background","LatestList","latestPosts","latestTodos","DashboardOverview","dashboardItems","wrap","Icon","fontSize","DashboardComponent","sort","order","postData","todoData","photoData","albumData","computeData","white","theme","createTheme","palette","common","black","primary","main","secondary","info","default","paper","root","App","ThemeProvider","CssBaseline","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5c46165.chunk.js","sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type UpdatePostInput = {\r\n    title?: string | null;\r\n    body?: string | null;\r\n};\r\nexport type UpdatePostMutationVariables = {\r\n    id: string;\r\n    input: UpdatePostInput;\r\n};\r\nexport type UpdatePostMutationResponse = {\r\n    readonly updatePost: {\r\n        readonly id: string | null;\r\n        readonly title: string | null;\r\n        readonly body: string | null;\r\n    } | null;\r\n};\r\nexport type UpdatePostMutation = {\r\n    readonly response: UpdatePostMutationResponse;\r\n    readonly variables: UpdatePostMutationVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nmutation UpdatePostMutation(\r\n  $id: ID!\r\n  $input: UpdatePostInput!\r\n) {\r\n  updatePost(id: $id, input: $input) {\r\n    id\r\n    title\r\n    body\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"id\"\r\n  },\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"input\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"id\",\r\n        \"variableName\": \"id\"\r\n      },\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"input\",\r\n        \"variableName\": \"input\"\r\n      }\r\n    ],\r\n    \"concreteType\": \"Post\",\r\n    \"kind\": \"LinkedField\",\r\n    \"name\": \"updatePost\",\r\n    \"plural\": false,\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"id\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"title\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"body\",\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"UpdatePostMutation\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Mutation\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"UpdatePostMutation\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"6be2e67f64b91ddcd411dab4229fe439\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"UpdatePostMutation\",\r\n    \"operationKind\": \"mutation\",\r\n    \"text\": \"mutation UpdatePostMutation(\\n  $id: ID!\\n  $input: UpdatePostInput!\\n) {\\n  updatePost(id: $id, input: $input) {\\n    id\\n    title\\n    body\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = 'e49db2f3a674db8209a573d4c1ba5cd4';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type CreatePostInput = {\r\n    title: string;\r\n    body: string;\r\n};\r\nexport type CreatePostMutationVariables = {\r\n    input: CreatePostInput;\r\n};\r\nexport type CreatePostMutationResponse = {\r\n    readonly createPost: {\r\n        readonly id: string | null;\r\n        readonly title: string | null;\r\n        readonly body: string | null;\r\n    } | null;\r\n};\r\nexport type CreatePostMutation = {\r\n    readonly response: CreatePostMutationResponse;\r\n    readonly variables: CreatePostMutationVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nmutation CreatePostMutation(\r\n  $input: CreatePostInput!\r\n) {\r\n  createPost(input: $input) {\r\n    id\r\n    title\r\n    body\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"input\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"input\",\r\n        \"variableName\": \"input\"\r\n      }\r\n    ],\r\n    \"concreteType\": \"Post\",\r\n    \"kind\": \"LinkedField\",\r\n    \"name\": \"createPost\",\r\n    \"plural\": false,\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"id\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"title\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"body\",\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"CreatePostMutation\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Mutation\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"CreatePostMutation\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"42ebe8e8dd832f8abc79fbebd5563420\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"CreatePostMutation\",\r\n    \"operationKind\": \"mutation\",\r\n    \"text\": \"mutation CreatePostMutation(\\n  $input: CreatePostInput!\\n) {\\n  createPost(input: $input) {\\n    id\\n    title\\n    body\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = 'a255a80d339284b5abec93c7085e189c';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type OperatorKindEnum = \"GTE\" | \"LIKE\" | \"LTE\" | \"NE\" | \"%future added value\";\r\nexport type SortOrderEnum = \"ASC\" | \"DESC\" | \"%future added value\";\r\nexport type PageQueryOptions = {\r\n    paginate?: PaginateOptions | null;\r\n    slice?: SliceOptions | null;\r\n    sort?: Array<SortOptions | null> | null;\r\n    operators?: Array<OperatorOptions | null> | null;\r\n    search?: SearchOptions | null;\r\n};\r\nexport type PaginateOptions = {\r\n    page?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SliceOptions = {\r\n    start?: number | null;\r\n    end?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SortOptions = {\r\n    field?: string | null;\r\n    order?: SortOrderEnum | null;\r\n};\r\nexport type OperatorOptions = {\r\n    kind?: OperatorKindEnum | null;\r\n    field?: string | null;\r\n    value?: string | null;\r\n};\r\nexport type SearchOptions = {\r\n    q?: string | null;\r\n};\r\nexport type PostQueryVariables = {\r\n    options?: PageQueryOptions | null;\r\n};\r\nexport type PostQueryResponse = {\r\n    readonly posts: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly body: string | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n};\r\nexport type PostQuery = {\r\n    readonly response: PostQueryResponse;\r\n    readonly variables: PostQueryVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nquery PostQuery(\r\n  $options: PageQueryOptions\r\n) {\r\n  posts(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      body\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"options\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"options\",\r\n        \"variableName\": \"options\"\r\n      }\r\n    ],\r\n    \"concreteType\": \"PostsPage\",\r\n    \"kind\": \"LinkedField\",\r\n    \"name\": \"posts\",\r\n    \"plural\": false,\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"concreteType\": \"Post\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"data\",\r\n        \"plural\": true,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"kind\": \"ScalarField\",\r\n            \"name\": \"id\",\r\n            \"storageKey\": null\r\n          },\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"kind\": \"ScalarField\",\r\n            \"name\": \"title\",\r\n            \"storageKey\": null\r\n          },\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"kind\": \"ScalarField\",\r\n            \"name\": \"body\",\r\n            \"storageKey\": null\r\n          }\r\n        ],\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"concreteType\": \"PageMetadata\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"meta\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"kind\": \"ScalarField\",\r\n            \"name\": \"totalCount\",\r\n            \"storageKey\": null\r\n          }\r\n        ],\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"PostQuery\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Query\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"PostQuery\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"a7ad8c0a799c896471cb0a9e911f3735\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"PostQuery\",\r\n    \"operationKind\": \"query\",\r\n    \"text\": \"query PostQuery(\\n  $options: PageQueryOptions\\n) {\\n  posts(options: $options) {\\n    data {\\n      id\\n      title\\n      body\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = 'b4da44b30ccf24fe6b71488236ab6e7a';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type OperatorKindEnum = \"GTE\" | \"LIKE\" | \"LTE\" | \"NE\" | \"%future added value\";\r\nexport type SortOrderEnum = \"ASC\" | \"DESC\" | \"%future added value\";\r\nexport type PageQueryOptions = {\r\n    paginate?: PaginateOptions | null;\r\n    slice?: SliceOptions | null;\r\n    sort?: Array<SortOptions | null> | null;\r\n    operators?: Array<OperatorOptions | null> | null;\r\n    search?: SearchOptions | null;\r\n};\r\nexport type PaginateOptions = {\r\n    page?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SliceOptions = {\r\n    start?: number | null;\r\n    end?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SortOptions = {\r\n    field?: string | null;\r\n    order?: SortOrderEnum | null;\r\n};\r\nexport type OperatorOptions = {\r\n    kind?: OperatorKindEnum | null;\r\n    field?: string | null;\r\n    value?: string | null;\r\n};\r\nexport type SearchOptions = {\r\n    q?: string | null;\r\n};\r\nexport type TodoQueryVariables = {\r\n    options?: PageQueryOptions | null;\r\n};\r\nexport type TodoQueryResponse = {\r\n    readonly todos: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly completed: boolean | null;\r\n            readonly user: {\r\n                readonly name: string | null;\r\n            } | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n};\r\nexport type TodoQuery = {\r\n    readonly response: TodoQueryResponse;\r\n    readonly variables: TodoQueryVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nquery TodoQuery(\r\n  $options: PageQueryOptions\r\n) {\r\n  todos(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      completed\r\n      user {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"options\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"kind\": \"Variable\",\r\n    \"name\": \"options\",\r\n    \"variableName\": \"options\"\r\n  }\r\n],\r\nv2 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"id\",\r\n  \"storageKey\": null\r\n},\r\nv3 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"title\",\r\n  \"storageKey\": null\r\n},\r\nv4 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"completed\",\r\n  \"storageKey\": null\r\n},\r\nv5 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"name\",\r\n  \"storageKey\": null\r\n},\r\nv6 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"concreteType\": \"PageMetadata\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"meta\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    {\r\n      \"alias\": null,\r\n      \"args\": null,\r\n      \"kind\": \"ScalarField\",\r\n      \"name\": \"totalCount\",\r\n      \"storageKey\": null\r\n    }\r\n  ],\r\n  \"storageKey\": null\r\n};\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"TodoQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"TodosPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"todos\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Todo\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              (v4/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"User\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"user\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  (v5/*: any*/)\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v6/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"type\": \"Query\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"TodoQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"TodosPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"todos\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Todo\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              (v4/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"User\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"user\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  (v5/*: any*/),\r\n                  (v2/*: any*/)\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v6/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      }\r\n    ]\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"15828bf8d13ec4415b4d3996e72012e7\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"TodoQuery\",\r\n    \"operationKind\": \"query\",\r\n    \"text\": \"query TodoQuery(\\n  $options: PageQueryOptions\\n) {\\n  todos(options: $options) {\\n    data {\\n      id\\n      title\\n      completed\\n      user {\\n        name\\n        id\\n      }\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = 'cc473cab9d242faf20dd34b4247772c9';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type UpdateTodoInput = {\r\n    title?: string | null;\r\n    completed?: boolean | null;\r\n};\r\nexport type ChangeTodoStatusMutationVariables = {\r\n    id: string;\r\n    input: UpdateTodoInput;\r\n};\r\nexport type ChangeTodoStatusMutationResponse = {\r\n    readonly updateTodo: {\r\n        readonly id: string | null;\r\n        readonly completed: boolean | null;\r\n    } | null;\r\n};\r\nexport type ChangeTodoStatusMutation = {\r\n    readonly response: ChangeTodoStatusMutationResponse;\r\n    readonly variables: ChangeTodoStatusMutationVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nmutation ChangeTodoStatusMutation(\r\n  $id: ID!\r\n  $input: UpdateTodoInput!\r\n) {\r\n  updateTodo(id: $id, input: $input) {\r\n    id\r\n    completed\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"id\"\r\n  },\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"input\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"id\",\r\n        \"variableName\": \"id\"\r\n      },\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"input\",\r\n        \"variableName\": \"input\"\r\n      }\r\n    ],\r\n    \"concreteType\": \"Todo\",\r\n    \"kind\": \"LinkedField\",\r\n    \"name\": \"updateTodo\",\r\n    \"plural\": false,\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"id\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"completed\",\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"ChangeTodoStatusMutation\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Mutation\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"ChangeTodoStatusMutation\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"bbd70318da7827a56274c5fd7421f326\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"ChangeTodoStatusMutation\",\r\n    \"operationKind\": \"mutation\",\r\n    \"text\": \"mutation ChangeTodoStatusMutation(\\n  $id: ID!\\n  $input: UpdateTodoInput!\\n) {\\n  updateTodo(id: $id, input: $input) {\\n    id\\n    completed\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = '0be46c4ea644c00c0128a9275d2da2cf';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type DeleteTodoMutationVariables = {\r\n    id: string;\r\n};\r\nexport type DeleteTodoMutationResponse = {\r\n    readonly deleteTodo: boolean | null;\r\n};\r\nexport type DeleteTodoMutation = {\r\n    readonly response: DeleteTodoMutationResponse;\r\n    readonly variables: DeleteTodoMutationVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nmutation DeleteTodoMutation(\r\n  $id: ID!\r\n) {\r\n  deleteTodo(id: $id)\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"id\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"id\",\r\n        \"variableName\": \"id\"\r\n      }\r\n    ],\r\n    \"kind\": \"ScalarField\",\r\n    \"name\": \"deleteTodo\",\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"DeleteTodoMutation\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Mutation\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"DeleteTodoMutation\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"7589b35d34e0635b238087902f8b9bba\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"DeleteTodoMutation\",\r\n    \"operationKind\": \"mutation\",\r\n    \"text\": \"mutation DeleteTodoMutation(\\n  $id: ID!\\n) {\\n  deleteTodo(id: $id)\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = 'fb91d2eb08da707b729f53214c4cba46';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type CreateTodoInput = {\r\n    title: string;\r\n    completed: boolean;\r\n};\r\nexport type CreateTodoMutationVariables = {\r\n    input: CreateTodoInput;\r\n};\r\nexport type CreateTodoMutationResponse = {\r\n    readonly createTodo: {\r\n        readonly id: string | null;\r\n        readonly title: string | null;\r\n        readonly completed: boolean | null;\r\n    } | null;\r\n};\r\nexport type CreateTodoMutation = {\r\n    readonly response: CreateTodoMutationResponse;\r\n    readonly variables: CreateTodoMutationVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nmutation CreateTodoMutation(\r\n  $input: CreateTodoInput!\r\n) {\r\n  createTodo(input: $input) {\r\n    id\r\n    title\r\n    completed\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"input\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"alias\": null,\r\n    \"args\": [\r\n      {\r\n        \"kind\": \"Variable\",\r\n        \"name\": \"input\",\r\n        \"variableName\": \"input\"\r\n      }\r\n    ],\r\n    \"concreteType\": \"Todo\",\r\n    \"kind\": \"LinkedField\",\r\n    \"name\": \"createTodo\",\r\n    \"plural\": false,\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"id\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"title\",\r\n        \"storageKey\": null\r\n      },\r\n      {\r\n        \"alias\": null,\r\n        \"args\": null,\r\n        \"kind\": \"ScalarField\",\r\n        \"name\": \"completed\",\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"storageKey\": null\r\n  }\r\n];\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"CreateTodoMutation\",\r\n    \"selections\": (v1/*: any*/),\r\n    \"type\": \"Mutation\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"CreateTodoMutation\",\r\n    \"selections\": (v1/*: any*/)\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"447314b529ff2f37e6c2e7f5d40f3637\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"CreateTodoMutation\",\r\n    \"operationKind\": \"mutation\",\r\n    \"text\": \"mutation CreateTodoMutation(\\n  $input: CreateTodoInput!\\n) {\\n  createTodo(input: $input) {\\n    id\\n    title\\n    completed\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = '24c8886a06b8bfe30db0d3db3b560e5d';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type OperatorKindEnum = \"GTE\" | \"LIKE\" | \"LTE\" | \"NE\" | \"%future added value\";\r\nexport type SortOrderEnum = \"ASC\" | \"DESC\" | \"%future added value\";\r\nexport type PageQueryOptions = {\r\n    paginate?: PaginateOptions | null;\r\n    slice?: SliceOptions | null;\r\n    sort?: Array<SortOptions | null> | null;\r\n    operators?: Array<OperatorOptions | null> | null;\r\n    search?: SearchOptions | null;\r\n};\r\nexport type PaginateOptions = {\r\n    page?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SliceOptions = {\r\n    start?: number | null;\r\n    end?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SortOptions = {\r\n    field?: string | null;\r\n    order?: SortOrderEnum | null;\r\n};\r\nexport type OperatorOptions = {\r\n    kind?: OperatorKindEnum | null;\r\n    field?: string | null;\r\n    value?: string | null;\r\n};\r\nexport type SearchOptions = {\r\n    q?: string | null;\r\n};\r\nexport type AlbumQueryVariables = {\r\n    options?: PageQueryOptions | null;\r\n};\r\nexport type AlbumQueryResponse = {\r\n    readonly albums: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly photos: {\r\n                readonly data: ReadonlyArray<{\r\n                    readonly title: string | null;\r\n                    readonly url: string | null;\r\n                } | null> | null;\r\n            } | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n};\r\nexport type AlbumQuery = {\r\n    readonly response: AlbumQueryResponse;\r\n    readonly variables: AlbumQueryVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nquery AlbumQuery(\r\n  $options: PageQueryOptions\r\n) {\r\n  albums(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      photos {\r\n        data {\r\n          title\r\n          url\r\n          id\r\n        }\r\n      }\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"options\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"kind\": \"Variable\",\r\n    \"name\": \"options\",\r\n    \"variableName\": \"options\"\r\n  }\r\n],\r\nv2 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"id\",\r\n  \"storageKey\": null\r\n},\r\nv3 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"title\",\r\n  \"storageKey\": null\r\n},\r\nv4 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"url\",\r\n  \"storageKey\": null\r\n},\r\nv5 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"concreteType\": \"PageMetadata\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"meta\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    {\r\n      \"alias\": null,\r\n      \"args\": null,\r\n      \"kind\": \"ScalarField\",\r\n      \"name\": \"totalCount\",\r\n      \"storageKey\": null\r\n    }\r\n  ],\r\n  \"storageKey\": null\r\n};\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"AlbumQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"AlbumsPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"albums\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Album\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"PhotosPage\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"photos\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  {\r\n                    \"alias\": null,\r\n                    \"args\": null,\r\n                    \"concreteType\": \"Photo\",\r\n                    \"kind\": \"LinkedField\",\r\n                    \"name\": \"data\",\r\n                    \"plural\": true,\r\n                    \"selections\": [\r\n                      (v3/*: any*/),\r\n                      (v4/*: any*/)\r\n                    ],\r\n                    \"storageKey\": null\r\n                  }\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v5/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      }\r\n    ],\r\n    \"type\": \"Query\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"AlbumQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": null,\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"AlbumsPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"albums\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Album\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"PhotosPage\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"photos\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  {\r\n                    \"alias\": null,\r\n                    \"args\": null,\r\n                    \"concreteType\": \"Photo\",\r\n                    \"kind\": \"LinkedField\",\r\n                    \"name\": \"data\",\r\n                    \"plural\": true,\r\n                    \"selections\": [\r\n                      (v3/*: any*/),\r\n                      (v4/*: any*/),\r\n                      (v2/*: any*/)\r\n                    ],\r\n                    \"storageKey\": null\r\n                  }\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v5/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      }\r\n    ]\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"56d70b0313ac323a59277b4a320f3a6d\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"AlbumQuery\",\r\n    \"operationKind\": \"query\",\r\n    \"text\": \"query AlbumQuery(\\n  $options: PageQueryOptions\\n) {\\n  albums(options: $options) {\\n    data {\\n      id\\n      title\\n      photos {\\n        data {\\n          title\\n          url\\n          id\\n        }\\n      }\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = '7910734f7f0ffdc9baaf24efeb638279';\r\nexport default node;\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n// @ts-nocheck\r\n\r\nimport { ConcreteRequest } from \"relay-runtime\";\r\nexport type OperatorKindEnum = \"GTE\" | \"LIKE\" | \"LTE\" | \"NE\" | \"%future added value\";\r\nexport type SortOrderEnum = \"ASC\" | \"DESC\" | \"%future added value\";\r\nexport type PageQueryOptions = {\r\n    paginate?: PaginateOptions | null;\r\n    slice?: SliceOptions | null;\r\n    sort?: Array<SortOptions | null> | null;\r\n    operators?: Array<OperatorOptions | null> | null;\r\n    search?: SearchOptions | null;\r\n};\r\nexport type PaginateOptions = {\r\n    page?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SliceOptions = {\r\n    start?: number | null;\r\n    end?: number | null;\r\n    limit?: number | null;\r\n};\r\nexport type SortOptions = {\r\n    field?: string | null;\r\n    order?: SortOrderEnum | null;\r\n};\r\nexport type OperatorOptions = {\r\n    kind?: OperatorKindEnum | null;\r\n    field?: string | null;\r\n    value?: string | null;\r\n};\r\nexport type SearchOptions = {\r\n    q?: string | null;\r\n};\r\nexport type DashboardQueryVariables = {\r\n    options?: PageQueryOptions | null;\r\n};\r\nexport type DashboardQueryResponse = {\r\n    readonly todoData: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly completed: boolean | null;\r\n            readonly user: {\r\n                readonly name: string | null;\r\n            } | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n    readonly postData: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly body: string | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n    readonly photoData: {\r\n        readonly data: ReadonlyArray<{\r\n            readonly id: string | null;\r\n            readonly title: string | null;\r\n            readonly url: string | null;\r\n        } | null> | null;\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n    readonly albumData: {\r\n        readonly meta: {\r\n            readonly totalCount: number | null;\r\n        } | null;\r\n    } | null;\r\n};\r\nexport type DashboardQuery = {\r\n    readonly response: DashboardQueryResponse;\r\n    readonly variables: DashboardQueryVariables;\r\n};\r\n\r\n\r\n\r\n/*\r\nquery DashboardQuery(\r\n  $options: PageQueryOptions\r\n) {\r\n  todoData: todos(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      completed\r\n      user {\r\n        name\r\n        id\r\n      }\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n  postData: posts(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      body\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n  photoData: photos(options: $options) {\r\n    data {\r\n      id\r\n      title\r\n      url\r\n    }\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n  albumData: albums(options: $options) {\r\n    meta {\r\n      totalCount\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\nconst node: ConcreteRequest = (function(){\r\nvar v0 = [\r\n  {\r\n    \"defaultValue\": null,\r\n    \"kind\": \"LocalArgument\",\r\n    \"name\": \"options\"\r\n  }\r\n],\r\nv1 = [\r\n  {\r\n    \"kind\": \"Variable\",\r\n    \"name\": \"options\",\r\n    \"variableName\": \"options\"\r\n  }\r\n],\r\nv2 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"id\",\r\n  \"storageKey\": null\r\n},\r\nv3 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"title\",\r\n  \"storageKey\": null\r\n},\r\nv4 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"completed\",\r\n  \"storageKey\": null\r\n},\r\nv5 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"kind\": \"ScalarField\",\r\n  \"name\": \"name\",\r\n  \"storageKey\": null\r\n},\r\nv6 = {\r\n  \"alias\": null,\r\n  \"args\": null,\r\n  \"concreteType\": \"PageMetadata\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"meta\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    {\r\n      \"alias\": null,\r\n      \"args\": null,\r\n      \"kind\": \"ScalarField\",\r\n      \"name\": \"totalCount\",\r\n      \"storageKey\": null\r\n    }\r\n  ],\r\n  \"storageKey\": null\r\n},\r\nv7 = {\r\n  \"alias\": \"postData\",\r\n  \"args\": (v1/*: any*/),\r\n  \"concreteType\": \"PostsPage\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"posts\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    {\r\n      \"alias\": null,\r\n      \"args\": null,\r\n      \"concreteType\": \"Post\",\r\n      \"kind\": \"LinkedField\",\r\n      \"name\": \"data\",\r\n      \"plural\": true,\r\n      \"selections\": [\r\n        (v2/*: any*/),\r\n        (v3/*: any*/),\r\n        {\r\n          \"alias\": null,\r\n          \"args\": null,\r\n          \"kind\": \"ScalarField\",\r\n          \"name\": \"body\",\r\n          \"storageKey\": null\r\n        }\r\n      ],\r\n      \"storageKey\": null\r\n    },\r\n    (v6/*: any*/)\r\n  ],\r\n  \"storageKey\": null\r\n},\r\nv8 = {\r\n  \"alias\": \"photoData\",\r\n  \"args\": (v1/*: any*/),\r\n  \"concreteType\": \"PhotosPage\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"photos\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    {\r\n      \"alias\": null,\r\n      \"args\": null,\r\n      \"concreteType\": \"Photo\",\r\n      \"kind\": \"LinkedField\",\r\n      \"name\": \"data\",\r\n      \"plural\": true,\r\n      \"selections\": [\r\n        (v2/*: any*/),\r\n        (v3/*: any*/),\r\n        {\r\n          \"alias\": null,\r\n          \"args\": null,\r\n          \"kind\": \"ScalarField\",\r\n          \"name\": \"url\",\r\n          \"storageKey\": null\r\n        }\r\n      ],\r\n      \"storageKey\": null\r\n    },\r\n    (v6/*: any*/)\r\n  ],\r\n  \"storageKey\": null\r\n},\r\nv9 = {\r\n  \"alias\": \"albumData\",\r\n  \"args\": (v1/*: any*/),\r\n  \"concreteType\": \"AlbumsPage\",\r\n  \"kind\": \"LinkedField\",\r\n  \"name\": \"albums\",\r\n  \"plural\": false,\r\n  \"selections\": [\r\n    (v6/*: any*/)\r\n  ],\r\n  \"storageKey\": null\r\n};\r\nreturn {\r\n  \"fragment\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Fragment\",\r\n    \"metadata\": null,\r\n    \"name\": \"DashboardQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": \"todoData\",\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"TodosPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"todos\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Todo\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              (v4/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"User\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"user\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  (v5/*: any*/)\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v6/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      },\r\n      (v7/*: any*/),\r\n      (v8/*: any*/),\r\n      (v9/*: any*/)\r\n    ],\r\n    \"type\": \"Query\",\r\n    \"abstractKey\": null\r\n  },\r\n  \"kind\": \"Request\",\r\n  \"operation\": {\r\n    \"argumentDefinitions\": (v0/*: any*/),\r\n    \"kind\": \"Operation\",\r\n    \"name\": \"DashboardQuery\",\r\n    \"selections\": [\r\n      {\r\n        \"alias\": \"todoData\",\r\n        \"args\": (v1/*: any*/),\r\n        \"concreteType\": \"TodosPage\",\r\n        \"kind\": \"LinkedField\",\r\n        \"name\": \"todos\",\r\n        \"plural\": false,\r\n        \"selections\": [\r\n          {\r\n            \"alias\": null,\r\n            \"args\": null,\r\n            \"concreteType\": \"Todo\",\r\n            \"kind\": \"LinkedField\",\r\n            \"name\": \"data\",\r\n            \"plural\": true,\r\n            \"selections\": [\r\n              (v2/*: any*/),\r\n              (v3/*: any*/),\r\n              (v4/*: any*/),\r\n              {\r\n                \"alias\": null,\r\n                \"args\": null,\r\n                \"concreteType\": \"User\",\r\n                \"kind\": \"LinkedField\",\r\n                \"name\": \"user\",\r\n                \"plural\": false,\r\n                \"selections\": [\r\n                  (v5/*: any*/),\r\n                  (v2/*: any*/)\r\n                ],\r\n                \"storageKey\": null\r\n              }\r\n            ],\r\n            \"storageKey\": null\r\n          },\r\n          (v6/*: any*/)\r\n        ],\r\n        \"storageKey\": null\r\n      },\r\n      (v7/*: any*/),\r\n      (v8/*: any*/),\r\n      (v9/*: any*/)\r\n    ]\r\n  },\r\n  \"params\": {\r\n    \"cacheID\": \"fedf88fefe6195cf87a8d1f49eeb1bd9\",\r\n    \"id\": null,\r\n    \"metadata\": {},\r\n    \"name\": \"DashboardQuery\",\r\n    \"operationKind\": \"query\",\r\n    \"text\": \"query DashboardQuery(\\n  $options: PageQueryOptions\\n) {\\n  todoData: todos(options: $options) {\\n    data {\\n      id\\n      title\\n      completed\\n      user {\\n        name\\n        id\\n      }\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n  postData: posts(options: $options) {\\n    data {\\n      id\\n      title\\n      body\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n  photoData: photos(options: $options) {\\n    data {\\n      id\\n      title\\n      url\\n    }\\n    meta {\\n      totalCount\\n    }\\n  }\\n  albumData: albums(options: $options) {\\n    meta {\\n      totalCount\\n    }\\n  }\\n}\\n\"\r\n  }\r\n};\r\n})();\r\n(node as any).hash = '143290d5fb97ba6380f989fe22532468';\r\nexport default node;\r\n","import { makeStyles, createStyles } from '@mui/styles';\r\n\r\nconst styles = createStyles({\r\n  link: {\r\n    textTransform: 'uppercase',\r\n    fontWeight: 500,\r\n    textDecoration: 'none',\r\n    color: 'inherit',\r\n    '&:hover': {\r\n      borderBottom: '2px solid #FFA726',\r\n      marginBottom: '-2px',\r\n    },\r\n  },\r\n  linkActive: {\r\n    borderBottom: '2px solid #FFA726',\r\n    marginBottom: '-2px',\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Link' });\r\n\r\nexport default useStyles;\r\n","import { NavLink } from 'react-router-dom';\r\nimport useStyles from './styles';\r\n\r\nexport type LinkProps = {\r\n  name: string;\r\n  path: string;\r\n};\r\n\r\nconst Link: React.FC<LinkProps> = ({ name, path }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <NavLink\r\n      to={path}\r\n      className={classes.link}\r\n      activeClassName={classes.linkActive}\r\n      exact\r\n    >\r\n      {name}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default Link;\r\n","import { Theme } from '@mui/material';\r\nimport { makeStyles, createStyles } from '@mui/styles';\r\n\r\nconst styles = ({ breakpoints }: Theme) =>\r\n  createStyles({\r\n    appName: {\r\n      [breakpoints.up('md')]: {\r\n        flex: 1,\r\n      },\r\n      [breakpoints.down('md')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    appLinks: {\r\n      display: 'flex',\r\n      flex: 1,\r\n      justifyContent: 'space-between',\r\n    },\r\n  });\r\n\r\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Nav' });\r\n\r\nexport default useStyles;\r\n","import { AppBar, Toolbar, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport Link, { LinkProps } from 'components/common/link';\r\nimport useStyles from './styles';\r\n\r\nconst Navigation: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const appLinks: LinkProps[] = [\r\n    { name: 'Dashboard', path: '/dashboard' },\r\n    { name: 'All Posts', path: '/post' },\r\n    { name: 'Photo Album', path: '/album' },\r\n    { name: 'Your Todo', path: '/todo' },\r\n  ];\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" component=\"div\" className={classes.appName}>\r\n          Demo Relay GraphQL\r\n        </Typography>\r\n        <Box className={classes.appLinks}>\r\n          {appLinks.map(({ name, path }) => (\r\n            <Link key={path} name={name} path={path} />\r\n          ))}\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { Variables } from 'react-relay';\r\nimport { GraphQLResponse, ObservableFromValue } from 'relay-runtime';\r\n\r\nconst { REACT_APP_API_URL = '' } = process.env;\r\n\r\nconst headers = {\r\n  Accept: 'application/json',\r\n  'Content-type': 'application/json',\r\n};\r\n\r\n// Define a function that fetches the results of a request (query/mutation/etc)\r\n// and returns its results as a Promise:\r\nexport const fetchGraphQL = (\r\n  operation: any,\r\n  variables: Variables\r\n): ObservableFromValue<GraphQLResponse> => {\r\n  const body = JSON.stringify({\r\n    query: operation.text, // GraphQL text from input\r\n    variables,\r\n  });\r\n\r\n  const response = fetch(REACT_APP_API_URL, {\r\n    method: 'POST',\r\n    headers,\r\n    body,\r\n  }).then((res) => res.json());\r\n\r\n  return response;\r\n};\r\n","import { Environment, Network, RecordSource, Store } from 'relay-runtime';\r\nimport { fetchGraphQL } from './fetchGraphQL';\r\n\r\n// Export a singleton instance of Relay Environment configured with our network function:\r\nexport default new Environment({\r\n  network: Network.create(fetchGraphQL),\r\n  store: new Store(new RecordSource()),\r\n});\r\n","import { commitMutation } from 'react-relay';\r\nimport { Environment } from 'relay-runtime';\r\nimport { graphql } from 'babel-plugin-relay/macro';\r\n\r\ninterface Post {\r\n  id: string;\r\n}\r\n\r\n// We start by defining our mutation from above using `graphql`\r\nconst mutation = graphql`\r\n  mutation UpdatePostMutation($id: ID!, $input: UpdatePostInput!) {\r\n    updatePost(id: $id, input: $input) {\r\n      id\r\n      title\r\n      body\r\n    }\r\n  }\r\n`;\r\n\r\nconst commit = (environment: Environment, post: Post, body?: string) => {\r\n  // Now we just call commitMutation with the appropriate parameters\r\n  return commitMutation(environment, {\r\n    mutation,\r\n    variables: {\r\n      id: post.id,\r\n      input: { body },\r\n    },\r\n  });\r\n};\r\n\r\nexport default commit;\r\n","import { commitMutation } from 'react-relay';\r\nimport { Environment } from 'relay-runtime';\r\nimport { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// We start by defining our mutation from above using `graphql`\r\nconst mutation = graphql`\r\n  mutation CreatePostMutation($input: CreatePostInput!) {\r\n    createPost(input: $input) {\r\n      id\r\n      title\r\n      body\r\n    }\r\n  }\r\n`;\r\n\r\nconst commit = (environment: Environment, post: PostInputs) => {\r\n  // Now we just call commitMutation with the appropriate parameters\r\n  return commitMutation(environment, {\r\n    mutation,\r\n    variables: {\r\n      input: { title: post.title, body: post.body },\r\n    },\r\n  });\r\n};\r\n\r\nexport default commit;\r\n","import { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// Define a query\r\nexport const query = graphql`\r\n  query PostQuery($options: PageQueryOptions) {\r\n    posts(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        body\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Grid,\r\n  Typography,\r\n} from '@mui/material';\r\n\r\ntype CardItemProps = {\r\n  item: Post;\r\n  handleEdit?: (Id: string) => VoidFunction;\r\n  hideActions?: boolean;\r\n};\r\n\r\nconst CardItem: React.FC<CardItemProps> = ({\r\n  item,\r\n  handleEdit,\r\n  hideActions,\r\n}) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Card}\r\n      key={item?.id}\r\n      xs={4}\r\n      md={3}\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: 'auto',\r\n      }}\r\n      margin={1}\r\n    >\r\n      <CardContent style={{ flexGrow: 1 }}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden',\r\n            whiteSpace: 'nowrap',\r\n          }}\r\n        >\r\n          {item?.id}. {item?.title}\r\n        </Typography>\r\n        <Typography variant=\"body2\">{item?.body}</Typography>\r\n      </CardContent>\r\n      {!hideActions && (\r\n        <CardActions>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={handleEdit!(item?.id!)}\r\n          >\r\n            Edit\r\n          </Button>\r\n        </CardActions>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardItem;\r\n","import React from 'react';\r\nimport { Grid } from '@mui/material';\r\nimport CardItem from '../card-item';\r\n\r\ntype CardListProps = {\r\n  data: ReadonlyArray<Post>;\r\n  handleEdit?: (Id: string) => VoidFunction;\r\n  hideActions?: boolean;\r\n};\r\n\r\nconst CardList: React.FC<CardListProps> = ({ data, ...props }) => {\r\n  return (\r\n    <Grid container alignItems=\"stretch\" justifyContent=\"center\">\r\n      {data.map((item) => (\r\n        <CardItem key={item?.id} item={item} {...props} />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import { Box, TextField, TextFieldProps, Typography } from '@mui/material';\r\nimport {\r\n  FieldPath,\r\n  FieldValues,\r\n  useController,\r\n  UseControllerProps,\r\n} from 'react-hook-form';\r\n\r\nexport interface MyInputProps<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> extends UseControllerProps<TFieldValues, TName>,\r\n    Omit<TextFieldProps, 'name' | 'defaultValue' | 'inputRef' | 'error'> {}\r\n\r\nfunction MyInput<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  name,\r\n  rules,\r\n  defaultValue,\r\n  control,\r\n  shouldUnregister,\r\n  InputLabelProps,\r\n  ...fieldProps\r\n}: MyInputProps<TFieldValues, TName>) {\r\n  const {\r\n    fieldState: { error },\r\n    field: { ref, ...inputProps },\r\n  } = useController<TFieldValues, TName>({\r\n    name,\r\n    rules,\r\n    defaultValue,\r\n    control,\r\n    shouldUnregister,\r\n  });\r\n  const errorMessage = error?.message;\r\n  return (\r\n    <Box>\r\n      <TextField\r\n        {...fieldProps}\r\n        {...inputProps}\r\n        InputLabelProps={{ shrink: true, ...InputLabelProps }}\r\n        error={!!errorMessage}\r\n        inputRef={ref}\r\n      />\r\n      {errorMessage && (\r\n        <Box mt={1 / 2}>\r\n          <Typography variant=\"body1\" color=\"error\">\r\n            {errorMessage}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MyInput;\r\n","import {\r\n  Grid,\r\n  DialogTitle,\r\n  IconButton,\r\n  Dialog,\r\n  DialogProps,\r\n} from '@mui/material';\r\nimport { Close as CloseIcon } from '@mui/icons-material';\r\n\r\ntype MyDialogProps = {\r\n  title: string;\r\n  onClose: React.MouseEventHandler;\r\n} & DialogProps;\r\n\r\nconst MyDialog: React.FC<MyDialogProps> = ({\r\n  title,\r\n  onClose,\r\n  children,\r\n  ...dialogProps\r\n}) => {\r\n  return (\r\n    <Dialog {...dialogProps} onClose={onClose}>\r\n      <Grid\r\n        container\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        paddingX={2}\r\n      >\r\n        <Grid item>\r\n          <DialogTitle>{title}</DialogTitle>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton title=\"Đóng\" size=\"medium\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n      {children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MyDialog;\r\n","import { Button, DialogContent, DialogActions, Grid } from '@mui/material';\r\nimport { useForm, SubmitHandler, DefaultValues } from 'react-hook-form';\r\nimport MyInput from 'components/common/my-input';\r\nimport MyDialog from 'components/common/my-dialog';\r\n\r\ntype PostFormProps = {\r\n  open: boolean;\r\n  onSubmit: SubmitHandler<PostInputs>;\r\n  onClose: React.MouseEventHandler;\r\n};\r\n\r\nconst initialValues: DefaultValues<PostInputs> = {\r\n  title: '',\r\n  body: '',\r\n};\r\n\r\nconst PostForm: React.FC<PostFormProps> = ({ open, onSubmit, onClose }) => {\r\n  const { handleSubmit, control } = useForm<PostInputs>({\r\n    defaultValues: initialValues,\r\n  });\r\n\r\n  return (\r\n    <MyDialog title=\"New post\" open={open} onClose={onClose} fullWidth>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent>\r\n          <Grid container spacing={1} flexDirection=\"column\">\r\n            <Grid item>\r\n              <MyInput\r\n                autoFocus\r\n                fullWidth\r\n                type=\"text\"\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                control={control}\r\n                margin=\"normal\"\r\n                rules={{\r\n                  required: 'Please fill in the Title field',\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <MyInput\r\n                fullWidth\r\n                multiline\r\n                type=\"text\"\r\n                name=\"body\"\r\n                label=\"Body\"\r\n                control={control}\r\n                rows={3}\r\n                margin=\"normal\"\r\n                rules={{\r\n                  required: 'Please fill in the Body field',\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container justifyContent=\"flex-end\" spacing={2} margin={2}>\r\n            <Grid item>\r\n              <Button onClick={onClose} color=\"secondary\" variant=\"outlined\">\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </form>\r\n    </MyDialog>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useState } from 'react';\r\nimport { QueryRenderer } from 'react-relay';\r\nimport {\r\n  CircularProgress,\r\n  Fab,\r\n  Grid,\r\n  Pagination,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport { Add as AddIcon } from '@mui/icons-material';\r\nimport relayEnvironment from 'relay/environment';\r\nimport type {\r\n  PostQuery,\r\n  PostQueryResponse,\r\n} from 'relay/queries/__generated__/PostQuery.graphql';\r\nimport UpdatePostMutation from 'relay/mutations/UpdatePostMutation';\r\nimport CreatePostMutation from 'relay/mutations/CreatePostMutation';\r\nimport { query } from 'relay/queries/Post';\r\nimport CardList from './components/card-list';\r\nimport PostForm from './components/create-form';\r\n\r\nconst LIMIT = 6;\r\n\r\nconst PostComponent: React.FC = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleSubmit = (post: PostInputs) => {\r\n    CreatePostMutation(relayEnvironment, post);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChangePage = (\r\n    _event: React.ChangeEvent<unknown>,\r\n    value: number\r\n  ) => {\r\n    if (value) {\r\n      setPage(value);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (postId: string) => () => {\r\n    UpdatePostMutation(relayEnvironment, { id: postId }, 'New Body');\r\n  };\r\n\r\n  const queryRender = ({ props }: RenderQueryProps<PostQueryResponse>) => {\r\n    if (!props) {\r\n      return (\r\n        <CircularProgress\r\n          style={{\r\n            textAlign: 'center',\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    const totalPosts = props.posts?.meta?.totalCount! || 0;\r\n    const posts = props.posts?.data!;\r\n\r\n    return (\r\n      <>\r\n        <CardList data={posts} handleEdit={handleEdit} />\r\n        {totalPosts > 0 && (\r\n          <Grid item container justifyContent=\"center\" xs={12}>\r\n            <Pagination\r\n              page={page}\r\n              count={Math.ceil(totalPosts / LIMIT)}\r\n              onChange={handleChangePage}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            />\r\n          </Grid>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n      marginY={1}\r\n      padding={1}\r\n    >\r\n      <QueryRenderer<PostQuery>\r\n        environment={relayEnvironment}\r\n        query={query}\r\n        variables={{\r\n          options: {\r\n            paginate: {\r\n              page,\r\n              limit: LIMIT,\r\n            },\r\n          },\r\n        }}\r\n        render={queryRender}\r\n      />\r\n\r\n      <Tooltip title=\"New Post\">\r\n        <Fab\r\n          color=\"primary\"\r\n          sx={{ position: 'fixed', bottom: '5%', right: '5%' }}\r\n          onClick={handleClickOpen}\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </Tooltip>\r\n      <PostForm open={open} onClose={handleClose} onSubmit={handleSubmit} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PostComponent;\r\n","import { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// Define a query\r\nexport const query = graphql`\r\n  query TodoQuery($options: PageQueryOptions) {\r\n    todos(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        completed\r\n        user {\r\n          name\r\n        }\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { commitMutation } from 'react-relay';\r\nimport { Environment } from 'relay-runtime';\r\nimport { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// We start by defining our mutation from above using `graphql`\r\nconst mutation = graphql`\r\n  mutation ChangeTodoStatusMutation($id: ID!, $input: UpdateTodoInput!) {\r\n    updateTodo(id: $id, input: $input) {\r\n      id\r\n      completed\r\n    }\r\n  }\r\n`;\r\n\r\nconst commit = (environment: Environment, completed: boolean, id: string) => {\r\n  // Now we just call commitMutation with the appropriate parameters\r\n  return commitMutation(environment, {\r\n    mutation,\r\n    variables: {\r\n      id,\r\n      input: { completed },\r\n    },\r\n  });\r\n};\r\n\r\nexport default commit;\r\n","import { commitMutation } from 'react-relay';\r\nimport { Environment } from 'relay-runtime';\r\nimport { graphql } from 'babel-plugin-relay/macro';\r\n\r\ninterface Todo {\r\n  id: string;\r\n}\r\n\r\n// We start by defining our mutation from above using `graphql`\r\nconst mutation = graphql`\r\n  mutation DeleteTodoMutation($id: ID!) {\r\n    deleteTodo(id: $id)\r\n  }\r\n`;\r\n\r\nconst commit = (environment: Environment, todo: Todo) => {\r\n  // Now we just call commitMutation with the appropriate parameters\r\n  return commitMutation(environment, {\r\n    mutation,\r\n    variables: {\r\n      id: todo.id,\r\n    },\r\n  });\r\n};\r\n\r\nexport default commit;\r\n","import { commitMutation } from 'react-relay';\r\nimport { Environment } from 'relay-runtime';\r\nimport { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// We start by defining our mutation from above using `graphql`\r\nconst mutation = graphql`\r\n  mutation CreateTodoMutation($input: CreateTodoInput!) {\r\n    createTodo(input: $input) {\r\n      id\r\n      title\r\n      completed\r\n    }\r\n  }\r\n`;\r\n\r\nconst commit = (environment: Environment, todo: TodoInputs) => {\r\n  // Now we just call commitMutation with the appropriate parameters\r\n  return commitMutation(environment, {\r\n    mutation,\r\n    variables: {\r\n      input: todo,\r\n    },\r\n  });\r\n};\r\n\r\nexport default commit;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Chip,\r\n  Grid,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { Done as DoneIcon, Pending as PendingIcon } from '@mui/icons-material';\r\n\r\ntype TodoItemProps = {\r\n  item: Todo;\r\n  handleEdit?: (Id: string) => VoidFunction;\r\n  handleDelete?: (Id: string) => VoidFunction;\r\n  hideActions?: boolean;\r\n};\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = ({\r\n  item,\r\n  handleEdit,\r\n  handleDelete,\r\n  hideActions,\r\n}) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Card}\r\n      xs={4}\r\n      md={3}\r\n      sx={{\r\n        display: 'flex',\r\n        height: 'auto',\r\n        flexDirection: 'column',\r\n        padding: 2,\r\n        margin: 1,\r\n      }}\r\n    >\r\n      <CardContent sx={{ flexGrow: 1 }}>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\">{item?.user?.name}</Typography>\r\n          {item?.completed && (\r\n            <Chip\r\n              label=\"Done\"\r\n              variant=\"outlined\"\r\n              color=\"success\"\r\n              icon={<DoneIcon />}\r\n            />\r\n          )}\r\n          {!item?.completed && (\r\n            <Chip\r\n              label=\"Pending\"\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              icon={<PendingIcon />}\r\n            />\r\n          )}\r\n        </Box>\r\n\r\n        <Typography sx={{ marginTop: 2 }}>{item?.title}</Typography>\r\n      </CardContent>\r\n      {!hideActions && (\r\n        <CardActions>\r\n          <Grid container justifyContent=\"space-around\">\r\n            {!item?.completed && (\r\n              <Grid\r\n                item\r\n                xs={5}\r\n                component={Button}\r\n                onClick={handleEdit!(item?.id!)}\r\n                variant=\"outlined\"\r\n              >\r\n                Complete\r\n              </Grid>\r\n            )}\r\n            <Grid\r\n              item\r\n              xs={5}\r\n              component={Button}\r\n              onClick={handleDelete!(item?.id!)}\r\n              variant=\"outlined\"\r\n              color=\"secondary.main\"\r\n              borderColor=\"secondary.main\"\r\n            >\r\n              Delete\r\n            </Grid>\r\n          </Grid>\r\n        </CardActions>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import { Grid } from '@mui/material';\r\nimport TodoItem from '../todo-item';\r\n\r\ntype TodoListProps = {\r\n  data: ReadonlyArray<Todo>;\r\n  handleEdit?: (Id: string) => VoidFunction;\r\n  handleDelete?: (Id: string) => VoidFunction;\r\n  hideActions?: boolean;\r\n};\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({ data, ...props }) => {\r\n  return (\r\n    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"stretch\">\r\n      {data.map((todo) => (\r\n        <TodoItem item={todo} key={todo?.id} {...props} />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { Button, DialogContent, DialogActions, Grid } from '@mui/material';\r\nimport { useForm, SubmitHandler, DefaultValues } from 'react-hook-form';\r\nimport MyInput from 'components/common/my-input';\r\nimport MyDialog from 'components/common/my-dialog';\r\n\r\ntype TodoFormProps = {\r\n  open: boolean;\r\n  onSubmit: SubmitHandler<TodoInputs>;\r\n  onClose: React.MouseEventHandler;\r\n};\r\n\r\nconst initialValues: DefaultValues<TodoInputs> = {\r\n  title: '',\r\n};\r\n\r\nconst TodoForm: React.FC<TodoFormProps> = ({ open, onSubmit, onClose }) => {\r\n  const { handleSubmit, control } = useForm<TodoInputs>({\r\n    defaultValues: initialValues,\r\n  });\r\n\r\n  return (\r\n    <MyDialog title=\"New Todo\" open={open} onClose={onClose} fullWidth>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent>\r\n          <Grid container spacing={1} flexDirection=\"column\">\r\n            <Grid item>\r\n              <MyInput\r\n                autoFocus\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                type=\"text\"\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                control={control}\r\n                margin=\"normal\"\r\n                rules={{\r\n                  required: 'Please fill in the Title field',\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container justifyContent=\"flex-end\" spacing={2} margin={2}>\r\n            <Grid item>\r\n              <Button onClick={onClose} color=\"secondary\" variant=\"outlined\">\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button type=\"submit\" color=\"primary\" variant=\"outlined\">\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </form>\r\n    </MyDialog>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import {\r\n  CircularProgress,\r\n  Fab,\r\n  Grid,\r\n  Pagination,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport { Add as AddIcon } from '@mui/icons-material';\r\nimport { QueryRenderer } from 'react-relay';\r\nimport { useState } from 'react';\r\nimport { query } from 'relay/queries/Todo';\r\nimport {\r\n  TodoQuery,\r\n  TodoQueryResponse,\r\n} from 'relay/queries/__generated__/TodoQuery.graphql';\r\nimport relayEnvironment from 'relay/environment';\r\nimport ChangeTodoStatusMutation from 'relay/mutations/ChangeTodoStatusMutation';\r\nimport DeleteTodoMutation from 'relay/mutations/DeleteTodoMutation';\r\nimport CreateTodoMutation from 'relay/mutations/CreateTodoMutation';\r\nimport TodoList from './components/todo-list';\r\nimport TodoForm from './components/todo-form';\r\n\r\nconst LIMIT = 9;\r\n\r\nconst TodoComponent: React.FC = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleSubmit = (todo: TodoInputs) => {\r\n    CreateTodoMutation(relayEnvironment, { ...todo, completed: false });\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChangePage = (\r\n    _event: React.ChangeEvent<unknown>,\r\n    value: number\r\n  ) => {\r\n    if (value) {\r\n      setPage(value);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (todoId: string) => () => {\r\n    ChangeTodoStatusMutation(relayEnvironment, true, todoId);\r\n  };\r\n\r\n  const handleDelete = (todoId: string) => () => {\r\n    DeleteTodoMutation(relayEnvironment, { id: todoId });\r\n  };\r\n\r\n  const queryRender = ({ props }: RenderQueryProps<TodoQueryResponse>) => {\r\n    if (!props) {\r\n      return (\r\n        <CircularProgress\r\n          style={{\r\n            textAlign: 'center',\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    const totalTodos = props.todos?.meta?.totalCount || 0;\r\n    const todos = props.todos?.data!;\r\n\r\n    return (\r\n      <>\r\n        <TodoList\r\n          data={todos}\r\n          handleEdit={handleEdit}\r\n          handleDelete={handleDelete}\r\n        />\r\n\r\n        {totalTodos > 0 && (\r\n          <Grid item container justifyContent=\"center\" xs={12} marginTop={1}>\r\n            <Pagination\r\n              page={page}\r\n              count={Math.ceil(totalTodos / LIMIT)}\r\n              onChange={handleChangePage}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            />\r\n          </Grid>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n      marginY={1}\r\n      padding={1}\r\n    >\r\n      <QueryRenderer<TodoQuery>\r\n        environment={relayEnvironment}\r\n        query={query}\r\n        variables={{\r\n          options: {\r\n            paginate: {\r\n              page,\r\n              limit: LIMIT,\r\n            },\r\n          },\r\n        }}\r\n        render={queryRender}\r\n      />\r\n      <Tooltip title=\"New Todo\">\r\n        <Fab\r\n          color=\"primary\"\r\n          sx={{ position: 'fixed', bottom: '5%', right: '5%' }}\r\n          onClick={handleClickOpen}\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n      </Tooltip>\r\n      <TodoForm open={open} onClose={handleClose} onSubmit={handleSubmit} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TodoComponent;\r\n","import { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// Define a query\r\nexport const query = graphql`\r\n  query AlbumQuery($options: PageQueryOptions) {\r\n    albums(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        photos {\r\n          data {\r\n            title\r\n            url\r\n          }\r\n        }\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport {\r\n  CircularProgress,\r\n  Grid,\r\n  ImageList,\r\n  ImageListItem,\r\n  ImageListItemBar,\r\n  ListSubheader,\r\n  Pagination,\r\n  Paper,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { QueryRenderer } from 'react-relay';\r\nimport relayEnvironment from 'relay/environment';\r\nimport { query } from 'relay/queries/Album';\r\nimport {\r\n  AlbumQuery,\r\n  AlbumQueryResponse,\r\n} from 'relay/queries/__generated__/AlbumQuery.graphql';\r\n\r\nconst LIMIT = 10;\r\n\r\nconst AlbumComponent: React.FC = () => {\r\n  const [page, setPage] = useState(1);\r\n\r\n  const handleChangePage = (\r\n    _event: React.ChangeEvent<unknown>,\r\n    value: number\r\n  ) => {\r\n    if (value) {\r\n      setPage(value);\r\n    }\r\n  };\r\n\r\n  const queryRender = ({ props }: RenderQueryProps<AlbumQueryResponse>) => {\r\n    if (!props) {\r\n      return (\r\n        <CircularProgress\r\n          style={{\r\n            textAlign: 'center',\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    const albums = props.albums?.data!;\r\n    const totalAlbums = props.albums?.meta?.totalCount || 0;\r\n    return (\r\n      <>\r\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n          {albums.map((album) => (\r\n            <Grid\r\n              item\r\n              key={album?.id}\r\n              xs={6}\r\n              md={4}\r\n              sx={{\r\n                height: 450,\r\n                overflowY: 'scroll',\r\n                margin: 2,\r\n                paddingX: 2,\r\n              }}\r\n              component={Paper}\r\n            >\r\n              <ImageList>\r\n                <ImageListItem key=\"Subheader\" cols={2}>\r\n                  <ListSubheader>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{\r\n                        textOverflow: 'ellipsis',\r\n                        overflow: 'hidden',\r\n                        whiteSpace: 'nowrap',\r\n                      }}\r\n                    >\r\n                      {album?.id}. {album?.title}\r\n                    </Typography>\r\n                  </ListSubheader>\r\n                </ImageListItem>\r\n                {album?.photos!.data!.map((photo) => (\r\n                  <ImageListItem key={photo?.url}>\r\n                    <img src={photo?.url!} alt=\"test\" />\r\n                    <ImageListItemBar title={photo?.title} />\r\n                  </ImageListItem>\r\n                ))}\r\n              </ImageList>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        {totalAlbums > 0 && (\r\n          <Grid item container justifyContent=\"center\" xs={12} marginTop={1}>\r\n            <Pagination\r\n              page={page}\r\n              count={Math.ceil(totalAlbums / LIMIT)}\r\n              onChange={handleChangePage}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            />\r\n          </Grid>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n      marginY={1}\r\n      padding={1}\r\n    >\r\n      <QueryRenderer<AlbumQuery>\r\n        environment={relayEnvironment}\r\n        query={query}\r\n        variables={{\r\n          options: {\r\n            paginate: {\r\n              page,\r\n              limit: LIMIT,\r\n            },\r\n          },\r\n        }}\r\n        render={queryRender}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AlbumComponent;\r\n","import { graphql } from 'babel-plugin-relay/macro';\r\n\r\n// Define a query\r\nexport const query = graphql`\r\n  query DashboardQuery($options: PageQueryOptions) {\r\n    todoData: todos(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        completed\r\n        user {\r\n          name\r\n        }\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n    postData: posts(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        body\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n    photoData: photos(options: $options) {\r\n      data {\r\n        id\r\n        title\r\n        url\r\n      }\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n    albumData: albums(options: $options) {\r\n      meta {\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Grid, Paper, Typography } from '@mui/material';\r\nimport { ReactElement } from 'react';\r\n\r\ntype LastestItemProps = {\r\n  name: string;\r\n  children: ReactElement;\r\n};\r\n\r\nconst LatestItem: React.FC<LastestItemProps> = ({ name, children }) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Paper}\r\n      xs={12}\r\n      sx={{\r\n        fontWeight: 'bold',\r\n        margin: 2,\r\n        padding: 2,\r\n        background: '#F0F8FF',\r\n      }}\r\n    >\r\n      <Typography variant=\"h6\" color=\"primary\" sx={{ marginBottom: 1 }}>\r\n        {name}\r\n      </Typography>\r\n      {children}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LatestItem;\r\n","import { Grid } from '@mui/material';\r\nimport PostList from 'containers/post/components/card-list';\r\nimport TodoList from 'containers/todo/components/todo-list';\r\nimport LatestItem from '../latest-item';\r\n\r\ntype LatestListProps = {\r\n  latestPosts: ReadonlyArray<Post>;\r\n  latestTodos: ReadonlyArray<Todo>;\r\n};\r\n\r\nconst LatestList: React.FC<LatestListProps> = ({\r\n  latestPosts,\r\n  latestTodos,\r\n}) => {\r\n  return (\r\n    <Grid container>\r\n      <LatestItem name=\"Latest Todos\">\r\n        <TodoList data={latestTodos} hideActions={true} />\r\n      </LatestItem>\r\n      <LatestItem name=\"Latest Posts\">\r\n        <PostList data={latestPosts} hideActions={true} />\r\n      </LatestItem>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LatestList;\r\n","import { Card, CardContent, Grid, Typography, Icon } from '@mui/material';\r\nimport { DashboardItem } from 'containers/dashboard/utils';\r\n\r\ntype DashboardOverViewProps = {\r\n  dashboardItems: DashboardItem[];\r\n};\r\n\r\nconst DashboardOverview: React.FC<DashboardOverViewProps> = ({\r\n  dashboardItems,\r\n}) => {\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"stretch\" wrap=\"nowrap\">\r\n      {dashboardItems.map(({ name, value, icon }) => (\r\n        <Grid item key={name} component={Card} xs={4} md={3} margin={2}>\r\n          <CardContent sx={{ textAlign: 'center' }}>\r\n            <Icon color=\"primary\" sx={{ fontSize: '4rem' }}>\r\n              {icon}\r\n            </Icon>\r\n            <Typography sx={{ fontWeight: 'bold' }}>\r\n              {value} {name}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DashboardOverview;\r\n","import { CircularProgress, Grid } from '@mui/material';\r\nimport { QueryRenderer } from 'react-relay';\r\nimport {\r\n  DashboardQuery,\r\n  DashboardQueryResponse,\r\n} from 'relay/queries/__generated__/DashboardQuery.graphql';\r\nimport { query } from 'relay/queries/Dashboard';\r\nimport relayEnvironment from 'relay/environment';\r\nimport { computeData } from './utils';\r\nimport LatestList from './components/latest-list';\r\nimport DashboardOverview from './components/dashboard-overview';\r\n\r\nconst DashboardComponent: React.FC = () => {\r\n  const queryRender = ({ props }: RenderQueryProps<DashboardQueryResponse>) => {\r\n    if (!props) {\r\n      return (\r\n        <Grid container justifyContent=\"center\" margin={2}>\r\n          <CircularProgress\r\n            style={{\r\n              textAlign: 'center',\r\n            }}\r\n          />\r\n        </Grid>\r\n      );\r\n    }\r\n\r\n    const dashboardItems = computeData(props);\r\n    const latestPosts = props.postData?.data!;\r\n    const latestTodos = props.todoData?.data!;\r\n\r\n    return (\r\n      <>\r\n        <DashboardOverview dashboardItems={dashboardItems} />\r\n        <LatestList latestPosts={latestPosts} latestTodos={latestTodos} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <QueryRenderer<DashboardQuery>\r\n      environment={relayEnvironment}\r\n      query={query}\r\n      variables={{\r\n        options: {\r\n          paginate: {\r\n            page: 1,\r\n            limit: 6,\r\n          },\r\n          sort: [\r\n            {\r\n              field: 'id',\r\n              order: 'DESC',\r\n            },\r\n          ],\r\n        },\r\n      }}\r\n      render={queryRender}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DashboardComponent;\r\n","import { DashboardQueryResponse } from 'relay/queries/__generated__/DashboardQuery.graphql';\r\n\r\nexport type DashboardItem = {\r\n  name: string;\r\n  value: number;\r\n  icon: string;\r\n};\r\n\r\nexport const computeData = (data: DashboardQueryResponse) => {\r\n  const totalPosts = data.postData?.meta?.totalCount || 0;\r\n  const totalTodos = data.todoData?.meta?.totalCount || 0;\r\n  const totalPhotos = data.photoData?.meta?.totalCount || 0;\r\n  const totalAlbums = data.albumData?.meta?.totalCount || 0;\r\n\r\n  const dashboardItems: DashboardItem[] = [\r\n    {\r\n      name: 'Posts',\r\n      value: totalPosts,\r\n      icon: 'description',\r\n    },\r\n    {\r\n      name: 'Todos',\r\n      value: totalTodos,\r\n      icon: 'listAlt',\r\n    },\r\n    {\r\n      name: 'Photos',\r\n      value: totalPhotos,\r\n      icon: 'photo',\r\n    },\r\n    {\r\n      name: 'Albums',\r\n      value: totalAlbums,\r\n      icon: 'photo_album',\r\n    },\r\n  ];\r\n\r\n  return dashboardItems;\r\n};\r\n","import { createTheme } from '@mui/material';\r\n\r\nconst white = '#FFFFFF';\r\nconst black = '#000000';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    common: {\r\n      black,\r\n      white,\r\n    },\r\n    primary: {\r\n      main: '#2196f3',\r\n    },\r\n    secondary: {\r\n      main: '#FFA726',\r\n    },\r\n    info: {\r\n      main: white,\r\n    },\r\n    background: {\r\n      default: '#EAEEF3',\r\n      paper: white,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { makeStyles, createStyles } from '@mui/styles';\r\n\r\nconst styles = createStyles({\r\n  root: {},\r\n});\r\n\r\nconst useStyles = makeStyles(styles, { classNamePrefix: 'App' });\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { RelayEnvironmentProvider } from 'react-relay/hooks';\r\nimport { CssBaseline, Box } from '@mui/material';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  BrowserRouter as Router,\r\n} from 'react-router-dom';\r\nimport { ThemeProvider } from '@mui/material';\r\nimport Navigation from 'components/app/navigation';\r\nimport relayEnvironment from 'relay/environment';\r\nimport PostComponent from 'containers/post';\r\nimport TodoComponent from 'containers/todo';\r\nimport AlbumComponent from 'containers/album';\r\nimport DashboardComponent from 'containers/dashboard';\r\nimport theme from 'theme';\r\nimport useStyles from 'App.styles';\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <RelayEnvironmentProvider environment={relayEnvironment}>\r\n          <Router>\r\n            <Navigation />\r\n            <Switch>\r\n              <Route path=\"/post\" exact component={PostComponent} />\r\n              <Route path=\"/todo\" exact component={TodoComponent} />\r\n              <Route path=\"/album\" exact component={AlbumComponent} />\r\n              <Route path=\"/dashboard\" exact component={DashboardComponent} />\r\n              <Redirect from=\"/\" to=\"/dashboard\" exact />\r\n            </Switch>\r\n          </Router>\r\n        </RelayEnvironmentProvider>\r\n      </ThemeProvider>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}